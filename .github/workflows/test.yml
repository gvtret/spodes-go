name: Go CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  GO111MODULE: on
  GOPROXY: https://proxy.golang.org,direct

jobs:
  test:
    strategy:
      matrix:
        go-version: [ '1.23', '1.24' ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    name: Test (Go ${{ matrix.go-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30  # Добавлен явный таймаут
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Go
      uses: actions/setup-go@v5.5.0
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Configure environment
      if: runner.os == 'Windows'
      run: |
        go env -w GOPATH="${{ github.workspace }}\go"
        go env -w GOCACHE="${{ github.workspace }}\go-build"
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ${{ runner.os == 'Windows' && format('{0}\go\pkg\mod', github.workspace) || '~/go/pkg/mod' }}
          ${{ runner.os == 'Windows' && format('{0}\go-build', github.workspace) || './.go/pkg/mod' }}
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
          
    - name: Install dependencies with retry
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          for ($i=1; $i -le 3; $i++) {
            go mod download
            if ($LASTEXITCODE -eq 0) { break }
            Start-Sleep -Seconds 15
          }
        else
          for i in {1..3}; do
            go mod download && break || sleep 15
          done
        fi
        go mod tidy
        go mod verify
        
    - name: Check formatting
      run: |
        diff -u <(echo -n) <(gofmt -d . || true)
        
    - name: Run tests
      run: |
        go test -v -timeout 10m -race -covermode=atomic -coverprofile=coverage.out ./...
        
    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      continue-on-error: true
      
    - name: Upload coverage report artifact
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.os }}-go${{ matrix.go-version }}
        path: coverage.html